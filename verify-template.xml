<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>50</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>50</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ref</name>
          <description>The ref that the repository should be reset to.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>pr_id</name>
          <description>The PR on which to comment on with success or failure message.</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.3.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>{repo}</url>
        <credentialsId>{repo-creds-id}</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>**</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <authToken>trigger</authToken>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
env
# Comments with success message if verify is good
report_success () {
  url=&quot;$1&quot;
  user=&quot;$2&quot;
  pass=&quot;$3&quot;
  job_url=&quot;$4&quot;
  echo {\&quot;text\&quot;:\&quot;SUCCESS ${job_url}\&quot;} &gt; successdata
  curl -s -k -u &quot;${user}&quot;:&quot;${pass}&quot; -X POST -H &quot;Content-Type: application/json&quot; -d @successdata &quot;${url}&quot;
  rm -f successdata
  echo &quot;Reporting success&quot;
}
# Comments with failure message if verify is not good
report_failure () {
  url=&quot;$1&quot;
  user=&quot;$2&quot;
  pass=&quot;$3&quot;
  job_url=&quot;$4&quot;
  echo {\&quot;text\&quot;:\&quot;FAILURE ${job_url}\&quot;} &gt; failuredata
  curl -s -k -u &quot;${user}&quot;:&quot;${pass}&quot; -X POST -H &quot;Content-Type: application/json&quot; -d @failuredata &quot;${url}&quot;
  rm -f failuredata
  echo &quot;Reporting failure&quot;
}
# Set up some options
set +e
set +x
set +H
git reset --hard
git clean -xfd
echo ${stashuser}
echo ${stashuserpassword}
# grab origin fetch URL and generate all the other pieces from that, i.e. these
# can be discovered from current repo and do not need to be passed in as parameters
# jenkins URL on the other hand will need to be passed in from somewhere because
# we can not discover it
origin_url=$(git remote -v | grep origin | grep fetch | awk &apos;{print $2}&apos;)
# grab project, repo, and stash URL
project=$(echo $origin_url | awk -F/ &apos;{print $(NF-1)}&apos;)
stash_repo=$(echo $origin_url | awk -F/ &apos;{print $(NF)}&apos; | sed &apos;s/.git//g&apos;)
stash_url=$(echo $origin_url | sed &apos;s|/scm/.*$||&apos;)
api_url=&quot;${stash_url}/rest/api/1.0/projects/${project}/repos/${stash_repo}&quot;
# Debug output
echo &quot;Project: &quot; $project
echo &quot;Repo: &quot; $repo
echo &quot;Stash URL: &quot; $stash_url
echo &quot;API URL: &quot; $api_url
# Assume jq binary will be available
if [[ ! $(which jq) ]]; then
  echo &quot;Need jq to be available in path&quot;
  exit 1
fi
echo &quot;PR id: ${pr_id}&quot;
git_ref=&quot;${ref}&quot;
info_link=&quot;${HOSTNAME}:{jenkinsport}/job/${JOB_NAME}/${BUILD_NUMBER}&quot;
marker=&quot;VERIFYING ${git_ref} ${info_link}&quot;
echo &quot;Marker: ${marker}&quot;
echo &quot;Git ref: ${git_ref}&quot;
comment_url=&quot;${api_url}/pull-requests/${pr_id}/comments&quot;
echo {\&quot;text\&quot;:\&quot;${marker}\&quot;} &gt; commentdata
curl -X POST -H &quot;Content-Type: application/json&quot; -d @commentdata -s -k -u &quot;${stashuser}&quot;:&quot;${stashuserpassword}&quot; &quot;${comment_url}&quot;
rm -f commentdata
echo &quot;Hard resetting to ${git_ref} and running verify script at scripts/verify.sh&quot;
git reset --hard ${git_ref}
# If verify exits with success then submit success along with job link
# otherwise submit failure comment with job link
(/bin/bash scripts/verify.sh &amp;&amp; report_success &quot;${comment_url}&quot; &quot;${stashuser}&quot; &quot;${stashuserpassword}&quot; &quot;${info_link}&quot;) || (report_failure &quot;${comment_url}&quot; &quot;${stashuser}&quot; &quot;${stashuserpassword}&quot; &quot;${info_link}&quot; &amp;&amp; /bin/false)</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.4">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>{stash-creds-id}</credentialsId>
          <usernameVariable>stashuser</usernameVariable>
          <passwordVariable>stashuserpassword</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>
